
@model PageViewModel
@{
    ViewBag.Title = Model.Title;
    string myGuid = Guid.NewGuid().ToString();
}

@Html.Hidden("confirm-unpublish-text", @SiteStrings.MyPages_Confirm_Unpublish)
@Html.Hidden("confirm-delete-text", @SiteStrings.MyPage_Confirm_Delete)
@Html.Hidden("delete-success", @SiteStrings.MyPage_DeleteSuccess)

<div class="row">
    <div class="col-sm-8">
        <h1 class="pagetitle">@Model.Title</h1>
    </div>
</div>

<!-- Viewer Dependencies -->
@*<script src="../lib/jquery/dist/jquery.js"></script>*@
@*<script src="../lib/markdown-it/dist/markdown-it.js"></script>*@
@*<script src="../lib/tui-code-snippet/dist/tui-code-snippet.js"></script>*@
@*<script src="../lib/highlightjs/highlight.pack.js"></script>*@
@*<link rel="stylesheet" href="../lib/highlightjs/styles/github.css">*@
@*<script src="../dist/tui-editor-Viewer.js"></script>
<link rel="stylesheet" href="../dist/tui-editor-contents.css">*@

<script src="~/node_modules/markdown-it/dist/markdown-it.js?v=@(myGuid)"></script>
<script src="~/node_modules/tui-code-snippet/dist/tui-code-snippet.js?v=@(myGuid)"></script>
<script src="~/node_modules/highlight.js/lib/highlight.js?v=@(myGuid)"></script>
<link rel="stylesheet" href="~/node_modules/highlight.js/styles/github.css">

<!-- Viewer -->
<script src="~/node_modules/tui-editor/dist/tui-editor-Viewer.js"></script>
<link rel="stylesheet" href="../dist/tui-editor-contents.css">

<script type="text/javascript">
    $(document).ready(function () {

        $('#Content').hide();

        //mdIt.block.ruler.before('fence', 'rk_fence', rk_fence, { alt: ['paragraph', 'reference', 'blockquote', 'list'] });
        //mdItHighlight.block.ruler.before('fence', 'rk_fence', rk_fence, { alt: ['paragraph', 'reference', 'blockquote', 'list'] });
        //mdIt.disable('fence');
        //mdItHighlight.disable('fence');

        var theEditor = new tui.Editor({
            el: document.querySelector('#editSection'),
            height: '300px',
        });

        @*editor.setValue('@Model.Content');*@
        var origMD = $('#Content').val();
        theEditor.setMarkdown(origMD, false);

        // Transform and set the markdown in the wysiwyg
        //theEditor.setMarkdown(toStdMarkdown(origMD), false);
        // When switching to markdown mode we have to run a minimal markdown transformation
        //theEditor.eventManager.listen('changeModeToMarkdown', function () {
        //    theEditor.setMarkdown(origMD, false);
        //    SyntaxHighlighter.highlight();
        //});

        //theEditor.eventManager.listen('changeModeBefore', function (currentMode) {
        //    // If a changeMode event was fired, and we're in markdown mode, that means we're about to switch to wysiwyg mode
        //    if (currentMode === 'markdown') {
        //        // Set the markdown to use the codemirror-compatible code block markdown
        //        theEditor.setMarkdown(toStdMarkdown(origMD), false);
        //    }
        //});

        // If a developer somehow changed the value in the hidden form field
        //$('#Content').on('change keyup paste mouseup', function () {
        //    if ($(this).val() != origMD) {
        //        // Propegate changes to wysiwyg editor via the transformed markdown
        //        origMD = $(this).val();
        //        theEditor.setMarkdown(toStdMarkdown(origMD), false);
        //    }
        //});

        // Transform CommonMark to standard markdown
        //function toStdMarkdown(commonMarkdown) {
        //    return commonMarkdown
        //        .replace(/&#/g, '&amp;#');                           // TUI entity escape
        //}

    });
</script>

<div class="row">
    <div class="col-sm-9">
        <textarea id="Content">@Model.Content</textarea>
        <div id="editSection"></div>
        @*<div id="pagecontent">
            @MvcHtmlString.Create(Model.ContentAsHtml)
        </div>*@
    </div>
    </div>


<div class="row">
    <div class="col-sm-6" style="padding-top:15px;">

        @if (Model.CompetitionInfo != "")
        {
            <div class="alert alert-info">
                @Model.CompetitionInfo
            </div>
        }
    </div>
    <div class="col-sm-6" style="padding-top:20px;display:inline-flex;">
        <span style="margin-top:10px;">@SiteStrings.MyPage_Status&nbsp;@MvcHtmlString.Create(Model.Status)</span>

        @if (Model.ModificationsEnable)
        {
            if (@Model.IsDraft)
            {
                <span style="float:right; margin-left:10px;">@Html.ActionLink(SiteStrings.Shared_EditLink, "Edit", "Pages", new { id = Model.Id }, new { @class = "btn btn-mini btn-primary" })</span>
                <span style="float:right; margin-left:10px;">@Html.ActionLink(SiteStrings.Shared_SubmitLink, "Submit", "Pages", new { id = Model.Id, view = "MyPage" }, new { @class = "btn btn-mini btn-primary" })</span>
                @*<button style="float:right; margin-left:10px;" class="btn btn-primary btn-mini" onclick="SubmitPage('@Model.Id')">@SiteStrings.Shared_SubmitLink</button>*@
            }
            if (@Model.IsPublished)
            {
                <button style="float:right; margin-left:10px;" class="btn btn-warning btn-mini" onclick="ConfirmGetbackPage('@Model.Id', 'mypage')">@SiteStrings.Shared_UnpublishLink</button>
            }
            if (@Model.IsSubmitted)
            {
                <span style="float:right; margin-left:10px;">@Html.ActionLink(SiteStrings.Shared_EditLink, "Edit", "Pages", new { id = Model.Id }, new { @class = "btn btn-mini btn-primary" })</span>
            }
        }
        <a href="#" onclick="ConfirmDeletePage('@Model.Id', 'mypage')" style="margin-top:10px;margin-left:10px;">@SiteStrings.Shared_DeleteLink</a>

    </div>
</div>
<br />
@*<div class="row">
        <div class="col-sm-7">
            <p>@Html.ActionLink(SiteStrings.Shared_DeleteLink, "Delete", new { id = Model.Id }, new { @onclick = "ConfirmDeletePage('@Model.Id', 'mypage')" })</p>
        </div>
    </div>*@

@section PluginHead
{
    <!-- Plugins -->
    @Html.Raw(Model.PluginHeadHtml)<!-- End plugins head -->
}

@section PluginPreContainer
{
    @MvcHtmlString.Create(Model.PluginPreContainer)
}

@section PluginPostContainer
{
    @MvcHtmlString.Create(Model.PluginPostContainer)
}

@section PluginFooter
{
    @MvcHtmlString.Create(Model.PluginFooterHtml)
}
